/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main;

import Connection.DatabaseCon;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.table.TableModel;

/**
 *
 * @author HELLO
 */
public class LaporanPinjam extends javax.swing.JPanel {
private Connection connect;
    /**
     * Creates new form LaporanPinjam
     */
    public LaporanPinjam() {
        initComponents();
        DatabaseCon data = new DatabaseCon();
        connect = data.getConnection();
        getData();
    }
    
    public static void simpanLaporanDariTabel(JTable table) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("laporan_peminjaman.txt"));
            writer.write("===== Laporan Data Peminjaman Buku Inkling's Library =====\n");

            TableModel model = table.getModel();
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            for (int i = 0; i < colCount; i++) {
                writer.write(model.getColumnName(i) + "\t");
            }
            writer.write("\n");

            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    writer.write(String.valueOf(model.getValueAt(i, j)) + "\t");
                }
                writer.write("\n");
            }

            writer.write("==========================================================\n");
            writer.close();

            JOptionPane.showMessageDialog(null, "Laporan berhasil disimpan ke 'laporan_peminjaman.txt'");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Gagal menyimpan laporan!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void getData() {
        DefaultTableModel model = (DefaultTableModel) tablePinjam.getModel();
        model.setRowCount(0);

        try {
           String sqlSelect = """
            SELECT 
                p.id_peminjaman,
                p.id_anggota,
                p.total_pinjam,
                p.tanggal_pinjam,
                p.tanggal_kembali,
                CASE 
                    WHEN pg.id_pengembalian IS NOT NULL THEN 'Dikembalikan'
                    WHEN p.tanggal_kembali < CURDATE() THEN 'Terlambat'
                    ELSE 'Dipinjam'
                END AS status,
                COALESCE(pg.denda, 0) AS denda
            FROM peminjaman p
            LEFT JOIN pengembalian pg ON p.id_peminjaman = pg.id_peminjaman
            ORDER BY p.tanggal_pinjam DESC
            """;
            PreparedStatement stmtSelect = connect.prepareStatement(sqlSelect);
            ResultSet rs = stmtSelect.executeQuery();
            
            while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("id_peminjaman"),
                rs.getString("id_anggota"),
                rs.getInt("total_pinjam"),
                rs.getDate("tanggal_pinjam"),
                rs.getDate("tanggal_kembali"),
                rs.getString("status"),
                rs.getInt("denda")
            });
        }

            tablePinjam.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal mengambil data!", "Error", JOptionPane.ERROR_MESSAGE);
        }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePinjam = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(8, 37, 69));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Borrow Book.png"))); // NOI18N
        jLabel1.setText("Laporan Data Transaksi Buku Inkling's Library");

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(8, 37, 69));
        jLabel4.setText("Laporan > Laporan Peminjaman");

        jLabel13.setIcon(new javax.swing.ImageIcon("C:\\Users\\HELLO\\OneDrive\\Gambar\\Elemen\\Borrow Book.png")); // NOI18N

        tablePinjam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Peminjaman", "Anggota", "Total Peminjaman", "Tanggal Pinjam", "Tanggal Kembali", "Status", "Denda"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePinjam.setPreferredSize(new java.awt.Dimension(525, 400));
        tablePinjam.setRequestFocusEnabled(false);
        tablePinjam.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablePinjam);
        if (tablePinjam.getColumnModel().getColumnCount() > 0) {
            tablePinjam.getColumnModel().getColumn(0).setResizable(false);
            tablePinjam.getColumnModel().getColumn(1).setResizable(false);
            tablePinjam.getColumnModel().getColumn(2).setResizable(false);
            tablePinjam.getColumnModel().getColumn(3).setResizable(false);
            tablePinjam.getColumnModel().getColumn(4).setResizable(false);
            tablePinjam.getColumnModel().getColumn(5).setResizable(false);
            tablePinjam.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        mainPanel.add(jPanel1, "card2");

        add(mainPanel, "card5");
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(this, "Berapa baris yang ingin dicetak?");
        int jumlahBaris = Integer.parseInt(input);

        int count = 0;
         DefaultTableModel model = (DefaultTableModel) tablePinjam.getModel();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("laporan_peminjaman.txt"))) {
            writer.write("ID Peminjaman\tAnggota\tTotal Peminjaman\tTanggal Pinjam\tTanggal Kembali\tStatus\tDenda\n");

            for (int i = 0; i < jumlahBaris && i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    writer.write(model.getValueAt(i, j).toString() + "\t");
                }
                writer.newLine();
            }

            JOptionPane.showMessageDialog(this, "Laporan berhasil dicetak ke laporan_peminjaman.txt");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal menulis file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable tablePinjam;
    // End of variables declaration//GEN-END:variables
}
